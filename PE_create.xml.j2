{# comment line #}
<config>
    <system xmlns="http://openconfig.net/yang/system">
        <config>
            <hostname>{{ inventory_hostname }}</hostname>
        </config>
    </system>
    <classifiers xmlns="urn:ciena:params:xml:ns:yang:ciena-pn::ciena-mef-classifier">
{% for interface in data.interfaces %}
    {% if interface.vlan is defined %}
        <classifier>
            <name>VLAN{{ interface.vlan }}</name>
            <filter-entry>
                <filter-parameter>vtag-stack</filter-parameter>
                <vtags>
                    <tag>1</tag>
                    <vlan-id>{{ interface.vlan }}</vlan-id>
                </vtags>
            </filter-entry>
        </classifier>
    {% endif %}
{% endfor %}
    </classifiers>
    <fds xmlns="urn:ciena:params:xml:ns:yang:ciena-pn:ciena-mef-fd">
{% for interface in data.interfaces %}
    {% if interface.vlan is defined %}
        <fd>
            <name>VLAN{{ interface.vlan }}</name>
            <mode>vpls</mode>
        </fd>
    {% endif %}
{% endfor %}
    </fds>
    <fps xmlns="urn:ciena:params:xml:ns:yang:ciena-pn:ciena-mef-fp">
{% for interface in data.interfaces %}
    {% if interface.vlan is defined %}
        <fp>
            <name>VLAN{{ interface.vlan }}</name>
            <fd-name>VLAN{{ interface.vlan }}</fd-name>
            <logical-port>{{ interface.port }}</logical-port>
            <stats-collection>on</stats-collection>
            <ingress-l2-transform>
                <ingress-name>pop-vid-{{ interface.vlan }}</ingress-name>
                <vlan-stack>
                    <tag>1</tag>
                    <pop-type />
                </vlan-stack>
            </ingress-l2-transform>
            <egress-l2-transform>
                <egress-name>push-vid-{{ interface.vlan }}</egress-name>
                <vlan-stack>
                    <tag>1</tag>
                    <push-tpid>tpid-8100</push-tpid>
                    <push-vid>{{ interface.vlan }}</push-vid>
                </vlan-stack>
            </egress-l2-transform>
            <classifier-list>VLAN{{ interface.vlan }}</classifier-list>
            <classifier-list-precedence>7</classifier-list-precedence>
        </fp>
    {% endif %}
{% endfor %}
    </fps>
    <interfaces xmlns="http://openconfig.net/yang/interfaces">
{% for interface in data.interfaces %}
        <interface>
            <name>{{ interface.name }}</name>
            <config>
                <name>{{ interface.name }}</name>
                <mtu>1500</mtu>
                <admin-status xmlns="http://ciena.com/ns/yang/ciena-openconfig-interfaces">true</admin-status>
                <type xmlns="http://ciena.com/ns/yang/ciena-openconfig-interfaces">{{ interface.type }}</type>
    {% if interface.vlan is defined %}
                <underlay-binding xmlns="http://ciena.com/ns/yang/ciena-underlay-binding">
                    <config>
                        <fd>VLAN{{ interface.vlan }}</fd>
                    </config>
                </underlay-binding>
                <vrfName xmlns="http://ciena.com/ns/yang/ciena-openconfig-interfaces">default</vrfName>
    {% endif %}
            </config>
            <ipv4 xmlns="http://ciena.com/ns/yang/ciena-openconfig-if-ip">
                <addresses>
                    <address>
                        <ip>{{ interface.ip }}</ip>
                        <config>
                            <ip>{{ interface.ip }}</ip>
    {% if interface.type == "loopback" %}
                            <prefix-length>32</prefix-length>
    {% else %}
                            <prefix-length>30</prefix-length>
    {% endif %}
                        </config>
                    </address>
                </addresses>
            </ipv4>
            <ipv6 xmlns="http://ciena.com/ns/yang/ciena-openconfig-if-ip">
                <addresses>
                    <address>
                        <ip>{{ interface.ipv6 }}</ip>
                        <config>
                            <ip>{{ interface.ipv6 }}</ip>
    {% if interface.type == "loopback" %}
                            <prefix-length>128</prefix-length>
    {% else %}
                            <prefix-length>127</prefix-length>
    {% endif %}
                        </config>
                    </address>
                </addresses>
            </ipv6>
        </interface>
{% endfor %}
    </interfaces>
    <isis xmlns="http://ciena.com/ns/yang/ciena-isis">
        <instance>
            <tag>{{ data.isis.tag }}</tag>
            <net>{{ data.isis.net }}</net>
            <interfaces>
{% for interface in data.interfaces %}
    {% if interface.nni is defined %}
        {% if interface.nni == true %}
                <interface>
                    <name>{{ interface.name }}</name>
                    <interface-type>point-to-point</interface-type>
                    <level-type>{{ interface.level }}</level-type>
                    <address-families>
                        <address-family>
                            <afi>ipv6</afi>
                            <safi>unicast</safi>
                        </address-family>
                    </address-families>
                </interface>
        {% endif %}
    {% endif %}
    {% if interface.type == "loopback" %}
                <interface>
                    <name>{{ interface.name }}</name>
                    <interface-type>point-to-point</interface-type>
                    <address-families>
                        <address-family>
                            <afi>ipv6</afi>
                            <safi>unicast</safi>
                        </address-family>
                    </address-families>
                </interface>
    {% endif %}
{% endfor %}
            </interfaces>
            <level-type>level-1</level-type>
        </instance>
    </isis>
{% if data.bgp is defined %}
    <bgp xmlns="http://ciena.com/ns/yang/ciena-bgp">
        <instance>
            <as>{{ data.bgp.as }}</as>
            <router-id>{{ data.interfaces | selectattr("type", "equalto", "loopback") | map(attribute="ip") | first }}</router-id>
            <address-family>
                <afi>ipv4</afi>
                <safi>unicast</safi>
            </address-family>
            <address-family>
                <afi>vpnv4</afi>
                <safi>unicast</safi>
            </address-family>
            <address-family>
                <afi>l2vpn</afi>
                <safi>evpn</safi>
            </address-family>
            <address-family>
                <afi>ipv4</afi>
                <safi>labeled-unicast</safi>
            </address-family>
        {% if data.bgp.peers is defined %}
            {% for peer in data.bgp.peers %}
            <peer>
                <address>{{ peer.address }}</address>
                <remote-as>{{ peer['remote-as'] }}</remote-as>
                <update-source-interface>{{ data.interfaces | selectattr("type", "equalto", "loopback") | map(attribute="name") | first }}</update-source-interface>
                <address-family>
                    <afi>ipv4</afi>
                    <safi>unicast</safi>
                    <activate>true</activate>
                </address-family>
                <address-family>
                    <afi>vpnv4</afi>
                    <safi>unicast</safi>
                    <route-reflector-client>{{ peer['address-family']['route-reflector-client'] }}</route-reflector-client>
                    <activate>true</activate>
                </address-family>
                <address-family>
                    <afi>l2vpn</afi>
                    <safi>evpn</safi>
                    <activate>true</activate>
                </address-family>
                <address-family>
                    <afi>ipv4</afi>
                    <safi>labeled-unicast</safi>
                    <activate>true</activate>
                </address-family>
            </peer>
            {% endfor %}
        {% endif %}
        </instance>
    </bgp>
{% endif %}
    <ldp xmlns="http://ciena.com/ns/yang/ciena/ciena-ldp">
        <instance>
            <tag>default</tag>
            <lsr-id>{{ data.interfaces | selectattr("type", "equalto", "loopback") | map(attribute="ip") | first }}</lsr-id>
            <interfaces>
                <interface>
{% for interface in data.interfaces %}
    {% if interface.nni is defined %}
        {% if interface.nni == true %}
                    <name>{{ interface.name }}</name>
        {% endif %}
    {% endif %}
{% endfor %}
                    <enable-ipv4>true</enable-ipv4>
                </interface>
            </interfaces>
        </instance>
    </ldp>
    <mpls xmlns="http://ciena.com/ns/yang/ciena-mpls">
        <interfaces>
            <interface>
                <name>{{ data.interfaces | selectattr("type", "equalto", "loopback") | map(attribute="name") | first }}</name>
                <label-switching>true</label-switching>
            </interface>
             <interface>
{% for interface in data.interfaces %}
    {% if interface.nni is defined %}
        {% if interface.nni == true %}
                <name>{{ interface.name }}</name>
        {% endif %}
    {% endif %}
{% endfor %}
                <label-switching>true</label-switching>
            </interface>
       </interfaces>
    </mpls>
</config> 